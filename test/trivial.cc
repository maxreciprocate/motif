#include "gtest/gtest.h"
#include "motif.h"
#include <fstream>


//TEST(MotifTest, trivial) {
//  ASSERT_EQ(ooo(), 10000);
//}

//TEST(MotifTest, simple_markers) {
//  std::string source("1111111111");
//  std::vector<std::string> markers{"1","11","111","1111",
//                                      "11111","111111"};
//  auto res = match(source, markers);
//  ASSERT_EQ(res, "111111");
//}

using namespace std;

TEST(MotifTest, test_missing_markers) {
    std::string source("ATGTTGGACACTCGGCGGACGACTGAGCACTGGAACTTTTTAAA");
    std::vector<std::string> markers{"ACGACTGAGCACT", "GAC", "ACG", "ACGACT", "ACTGTT"};
    uint64_t size = 31;

    auto res = match(source, markers, size);

  ASSERT_EQ(res, "11110");

  source = "GGCTCAAATTACACGTAAACTTAAGAATATTCG";
  markers = {"TAC", "ACA", "TTACAG", "ATA", "TAT", "ATAT"};
  size = 22;

    res = match(source, markers, size);

  ASSERT_EQ(res, "110111");
}

//TEST(MorifTest, test_empty) {
//  std::string source("ATGTTGGACACTCGGCGGACGACTGAGCACTGGAACTTTTTAAA");
//  std::vector<std::string> markers{};
//  auto res = match(source, markers);
//
//  ASSERT_EQ(res, "");
//}
////
////TEST(MotifTest, test_multiple_small_strings) {
////  std::string source("ATGTTGGACACTCGGCGGACGACTGAGCACTGGAACTTTTTAAA");
////  std::vector<std::string> markers{"11", "123", "125", "ATA"};
////  auto res = match(source, markers);
////
////  ASSERT_EQ(res, "0001");
////}
//
////TEST(MotifTest, test_cascade) {
////  std::string source("1111111111");
////  std::vector<std::string> markers{"1","12","111","1111"};
////  auto res = match(source, markers);
////
////  ASSERT_EQ(res, "101111");
////}
////
//TEST(MotifTest, test_markers_bigger_than_source) {
//  std::string source("TAAAAAACGT");
//  std::vector<std::string> to_match{"TAAAAAACGTTAAAAAACGT",
//                                    "ATGTTGGAACCGGCGGGGAACTTTTTAAATTTTAATGGCTTCAGCGAACCCGAAAAAGCACTCGAGGGTGCCATCATAAGAGAGATTGAAGATGGAGTTCGCTGTGAGCAATGTAAATCAGATTGCCCGGGTTTTGCAGCTCACGATTGGAGGAAAACCTGCCAATCCTGCAAATGTCCTCGCGAGGCACATGCCATATACCAGCAACAAACGACCAACGTCCACGAGCGACTCGGCTTCAAACTGGTTTCCCCGGCGGATTCCGGAGTGGAGGCGAGGGATCTGGG"};
//  auto res = match(source, to_match);
//  ASSERT_EQ(res, "00");
//}
//#include <filesystem>
//TEST(MotifTest, test_on_drosophila) {
//  std::ifstream f("./drosophila.fasta");
//  std::string source;
//  std::getline(f, source);
//
//  std::vector<std::string> to_match{"ATGTTGGAACCGGCGGGGAACTTTTTAAATTTTAATGGCTTCAGCGAACCCGAAAAAGCACTCGAGGGTGCCATCATAAGAGAGATTGAAGATGGAGTTCGCTGTGAGCAATGTAAATCAGATTGCCCGGGTTTTGCAGCTCACGATTGGAGGAAAACCTGCCAATCCTGCAAATGTCCTCGCGAGGCACATGCCATATACCAGCAACAAACGACCAACGTCCACGAGCGACTCGGCTTCAAACTGGTTTCCCCGGCGGATTCCGGAGTGGAGGCGAGGGATCTGGG",
//                                    "ATGTTGGAACCGGCGGGGAACTTTTTAAATTTTAATGGCTTCAGCGAACCCGAAAAAGCACTCGAGGGTGCCATCATAAGAGAGATTGAAGATGGAGTTCGCTGTGAGCAATGTAAATCAGATTGCCCGGGTTTTGCAGCTCACGATTGGAGGAAAACCTGCCAATCCTGCAAATGTCCTCGCGAGGCACATGCCATATACCAGCAACAAACGACCAACGTCCACGAGCGACTCGGCTTCAAACTGGTTTCCCCGGCGGATTCCGGAGTGGAGGCGAGGGATCTGGGCTTCACGTGGGTTCCGCCCGGACTGCGAGCCTCGTCGCGGATCATCCGCTATTTCGAGCAGCTGCCCGATGAGGCGGTGCCCCGGTTGGGCAGCGAGGGAGCCTGCAGTCGGGAGCGCCAGATCTCGTACCAGCTGCCCAAACAGGACCTCTCGCTGGAGCACTGTAAGCACCTGGAGGTGCAGCACGAGTCCTCCTTCGAGGACTTTGTGACGGCGCGGAACGAAATCGCACTGGATATAGCCTACATCAAGGATGCACCCTACGATGAGCATTGTGCGCACTGTGATAACGAGATAGCTGCCGGCGAGCTGGTTGTAGCGGCGCCCAAGTTTGTGGAGAGCGTGATGTGGCACCCCAAGTGCTTCACCTGCAGCACCTGCAACCTGCTCCTGGTGGACCTCACCTACTGTGTCCACGACGACAAGGTCTACTGCGAGCGCCACTATGCGGAAATGCTGAAGCCCCGCTGCGCTGGCTGTGATGAGGTGAGTTCCCTCTAG",
//                                    "AATGGCTTCAGCGAACCCGAAAAAGCACTCGAGGGTGCCATCATAAGAGAGATTGAAGATGGAGTTCGCTGTGAGCAATGTAAATCAGATTGCCCGG"};
//  auto res = match(source, to_match);
//  ASSERT_EQ(res, "111");
//}
//
////TEST(MotifTest, test_small_and_big) {
////  std::ifstream f("./data/drosophila.fasta");
////  std::string source;
////  std::getline(f, source);
////
////  std::vector<std::string> to_match{"ATGTTGGAACCGGCGGGGAACTTTTTAAATTTTAATGGCTTCAGCGAACCCGAAAAAGCACTCGAGGGTGCCATCATAAGAGAGATTGAAGATGGAGTTCGCTGTGAGCAATGTAAATCAGATTGCCCGGGTTTTGCAGCTCACGATTGGAGGAAAACCTGCCAATCCTGCAAATGTCCTCGCGAGGCACATGCCATATACCAGCAACAAACGACCAACGTCCACGAGCGACTCGGCTTCAAACTGGTTTCCCCGGCGGATTCCGGAGTGGAGGCGAGGGATCTGGGCTTCACGTGGGTTCCGCCCGGACTGCGAGCCTCGTCGCGGATCATCCGCTATTTCGAGCAGCTGCCCGATGAGGCGGTGCCCCGGTTGGGCAGCGAGGGAGCCTGCAGTCGGGAGCGCCAGATCTCGTACCAGCTGCCCAAACAGGACCTCTCGCTGGAGCACTGTAAGCACCTGGAGGTGCAGCACGAGTCCTCCTTCGAGGACTTTGTGACGGCGCGGAACGAAATCGCACTGGATATAGCCTACATCAAGGATGCACCCTACGATGAGCATTGTGCGCACTGTGATAACGAGATAGCTGCCGGCGAGCTGGTTGTAGCGGCGCCCAAGTTTGTGGAGAGCGTGATGTGGCACCCCAAGTGCTTCACCTGCAGCACCTGCAACCTGCTCCTGGTGGACCTCACCTACTGTGTCCACGACGACAAGGTCTACTGCGAGCGCCACTATGCGGAAATGCTGAAGCCCCGCTGCGCTGGCTGTGATGAGGTGAGTTCCCTCTAG",
////                                    "TAAAAAACGT", "777"};
////
////  auto res = match(source, to_match);
////  ASSERT_EQ(res, "110");
////}
////

